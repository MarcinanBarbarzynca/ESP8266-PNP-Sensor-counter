/**
Kod do sterownika 1.
*/

#include <Arduino.h>

#include <ESP8266WiFi.h>
#include <ESP8266WiFiMulti.h>

#include <ESP8266HTTPClient.h>

#include <WiFiClient.h>

ESP8266WiFiMulti WiFiMulti;

 String Login = "Tu_SSID_sieci_wifi"; 
 String Password = "tu_haslo_sieci_wifi";


 long interval = 10000; //Co ile ma wysyłać stan
unsigned long previousMillis = 0;
unsigned long currentMillis = 0;


const String server_adress = "http://10.185.49.8/test/"; //Aktualnie jest serwer
const String php_target = "insert.php"; //nazwa skryptu uzupelniajacego. Trzeba pamiętać o "?"
const String field_one = "?nazwa=";
const String sensor_id_number = "1"; //Id utworzonego w bazie danych sensora
const String field_two = "&dane=";
int i = 0;

int flip_flop = 0;
int led = D4;
int czujnik = D8; //PNP Proximity sensor.
int licznik_impulsow = 0;
void ICACHE_RAM_ATTR dodaj_l_jeden() { //Ta funkcja jest realizowana przez drugi wątek esp.
  licznik_impulsow++;
}



void setup() {
  pinMode(led, OUTPUT);
  pinMode(czujnik, INPUT);
  Serial.begin(115200);
  // Serial.setDebugOutput(true);
  Serial.println();
  for (uint8_t t = 4; t > 0; t--) {
    Serial.printf("[SETUP] WAIT %d...\n", t);
    Serial.flush();
    delay(1000);
  }

  //  if (!WiFi.config(local_IP,subnet)) {
  //    Serial.println("STA Failed to configure");
  //  }
  WiFi.mode(WIFI_STA);

  WiFiMulti.addAP(Login, Password);


  attachInterrupt(digitalPinToInterrupt(czujnik), dodaj_l_jeden, FALLING); //Ten interrupt musi znaleźć się na końcu całego setupa


}

void loop() {

  // wait for WiFi connection
  //Generowanie danych
  if ((WiFiMulti.run() == WL_CONNECTED)) {
    currentMillis = millis();
    if (currentMillis - previousMillis >= interval) {
      previousMillis = currentMillis;


      Serial.print("[HTTP] begin... \n");


      String complete_adress = server_adress + php_target + field_one + sensor_id_number + field_two + licznik_impulsow;
      Serial.println(complete_adress);
      Serial.println();

      WiFiClient client;

      HTTPClient http;


      if (http.begin(client, complete_adress)) {


        Serial.print("[HTTP] GET...\n");
        // start connection and send HTTP header
        int httpCode = http.GET();

        // httpCode will be negative on error
        if (httpCode > 0) {
          // HTTP header has been send and Server response header has been handled
          Serial.printf("[HTTP] GET... code: %d\n", httpCode);

          // file found at server
          if (httpCode == HTTP_CODE_OK || httpCode == HTTP_CODE_MOVED_PERMANENTLY) {
            String payload = http.getString();
            licznik_impulsow = 0;
            if (flip_flop == 0) {
              digitalWrite(led, HIGH);
              flip_flop = 1;
            } else {
              digitalWrite(led, LOW);
              flip_flop = 0;
            }
            Serial.println(payload);
          }
        } else {
          Serial.printf("[HTTP] GET... failed, error: %s\n", http.errorToString(httpCode).c_str());
        }

        http.end();
      } else {
        Serial.printf("[HTTP} Unable to connect\n");
      }
    }
  }

  //delay(10000);
}
